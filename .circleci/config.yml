version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd backend 
            #URL02=("http://$s3Buck.s3-website-eu-east-1.amazonaws.com")
            echo "Destroying environment: <<parameters.workflow_id>> "
            #aws s3 rm s3://udapeople-frontend-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
           
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
             
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
  undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            if [[ -f ".circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi               

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
    
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test  
   
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
          
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan 
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
           name: scan-backend
           command: |
                 cd backend
                 npm install
                  npm audit fix --audit-level=critical --force
      - save_cache:
           paths: [backend/node_modules]
           key: scan-backend    
           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"         
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                VIJI_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                
                 echo "[web]" > .circleci/ansible/inventory.txt
                 echo "$VIJI_IP" > .circleci/ansible/inventory.txt
                 
                 cat .circleci/ansible/inventory.txt
         # no_output_timeout: 5m      
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      #- destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
                fingerprints: ["7c:ef:94:b3:c8:e8:e8:cc:30:24:65:9c:bb:dd:c4:91"]
      - attach_workspace:
                at: ~/
      - run:
              name: Install dependencies
              command: |
                       apk add --no-cache \
                       python3 \
                       py3-pip \
                       && pip3 install --upgrade pip \
                       && pip3 install \
                       awscli \
                       && rm -rf /var/cache/apk/*
                       apk add --update ansible
      - run:
              name: Configure server
              command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
                
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]  
            
      - run:
            name: envts
            
            command: |
              cd  backend
              touch .env
              echo ENVIROMENT=production > .env
              echo NODE_ENV=production >> ".env"
              echo TYPEORM_CONNECTION=postgres >> .env
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
              echo TYPEORM_HOST=$TYPEORM_HOST >> .env
              echo TYPEORM_PORT=$TYPEORM_PORT >> .env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
              ls -latr
              cat .env      
      - run:
          name: Run migrations
          command : | 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
              curl -H "Content-Type: text/plain" -H "token: 3db6c101-a4a9-41b4-9a5c-259717683a43" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}              
             fi      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
           
  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
            name: Install dependencies
            command: |
              sudo apt-get -y -qq update
              sudo apt-get -qq install awscli
      - attach_workspace:
            at: .    
      - run:
            # MUST be http not https
            name: Get backend url
            command: |
             export VIJIS_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text)
              echo $VIJIS_IP
              export API_URL="http://$VIJIS_IP:3030"
              echo API_URL=${API_URL}
              cd frontend
              npm install
              npm run build     
        
      - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              # s3Buck=$(echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}")
              s3Buck=$(echo "udapeople-c34e187")
              aws s3 sync dist s3://$s3Buck/
              URL02=("http://$s3Buck.s3-website-eu-east-1.amazonaws.com")
              # curl -H "Content-Type: text/plain" -H "token: 3db6c101-a4a9-41b4-9a5c-259717683a43" --request PUT --data "$URL02" https://api.memstash.io/values/s3Buck_${CIRCLE_WORKFLOW_ID}
              curl -H "Content-Type: text/plain" -H "token: 3db6c101-a4a9-41b4-9a5c-259717683a43" --request PUT --data "$URL02" https://api.memstash.io/values/s3Buck_c34e187
            
      - persist_to_workspace:
            root: .
            paths:
              - frontend/dist
      - undo_migrations
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
  
    steps:
      - checkout
      - run:
          name: Install depend
          command: |
            apk add tar gzip
            apk update pip3
            pip3 install awscli
            apk add --update curl
            apk add --update nodejs npm
            apk add --update ansible
      - add_ssh_keys:
                  fingerprints: ["7c:ef:94:b3:c8:e8:e8:cc:30:24:65:9c:bb:dd:c4:91"]
      
      - attach_workspace:
          at: ~/              
      
      - run:
          name: Get ip  and deploy back end 
          command: |        
            ls -la
            [[ ! -d backend ]] && mkdir backend
            myenv="backend/.env"
            echo ENVIROMENT=production > $myenv
            echo NODE_ENV=production >> $myenv
            echo TYPEORM_CONNECTION=postgres >> $myenv
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> $myenv
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> $myenv
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> $myenv
            echo TYPEORM_HOST=$TYPEORM_HOST >> $myenv
            echo TYPEORM_PORT=$TYPEORM_PORT >> $myenv
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> $myenv
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> $myenv
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> $myenv
            cat $myenv
          
            tar -C backend -czvf artifact.tar.gz .
            ls -la
            
            VIJI_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                 echo "$VIJI_IP"
                 echo "[web]" > .circleci/ansible/inventory.txt
                 echo $VIJI_IP >> .circleci/ansible/inventory.txt
                 cat .circleci/ansible/inventory.txt
                 
            #npm i
            #npm run build
            #cd ..
            cd .circleci/ansible
            #echo "Contents  of the inventory.txt file is -------"
            #cat .circleci/ansible/inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
  
      - undo_migrations
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
  smoke-test:
    docker:
      - image: python:3.7-alpine3.12 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
            apk add --update tar gzip curl
            apk add --update curl #for slack notify
            apk add --update jq #for slack notify
      
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees" 
            #URL="http://udapeople-9e5efdd.s3-website-us-east-1.amazonaws.com/#/employees" 
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              echo "Frontend alive"  
            else
              return 1
            fi
      
      - run:
          name: Backend  Smoke test
          command: |
            export VIJIS_IP=$(aws ec2 describe-instances \
                          --query 'Reservations[*].Instances[*].PublicIpAddress' \
                          --filters "Name=tag:project,Values=udapeople" \
                          --output text)
                         echo $VIJIS_IP
                         export API_URL="http://$VIJIS_IP:3030"
                        echo "${API_URL}"
             if curl "${API_URL}/api/status" | grep "ok"
             then
               echo "Backend alive, Proceeding"                      
             else
               return 1
             fi      
      
      - undo_migrations
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
      
workflows:
  default:
    jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]   
#       - scan-frontend:
#           requires: [build-frontend]
#       - scan-backend:
#           requires: [build-backend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#               branches:
#                 only:
#                   - master 
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]   
      - deploy-frontend
#           requires: [run-migrations]
      - deploy-backend
#           requires: [run-migrations]
      - smoke-test:
         requires:
           - deploy-frontend
           - deploy-backend 
     
