version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            cd backend
            echo "Destroying environment: <<parameters.workflow_id>> "
            #aws s3 rm s3://udapeople-s3bucket-${CIRCLE_WORKFLOW_ID}/ --recursive
           
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
             
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
undo_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            if [[ -f ".circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi               

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm update
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
    
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test  
   
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
          
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan 
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [scan-backend]
      - run:
           name: scan-backend
           command: |
                 cd backend
                 npm install
                  npm audit fix --audit-level=critical --force
      - save_cache:
           paths: [backend/node_modules]
           key: scan-backend    
           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"         
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                VIJI_IP=$(aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:project,Values=udapeople" \
                  --output text)
                
                 echo "http://$VIJI_IP:3030" > .circleci/outputs/link.txt 
                 echo "[all]" > .circleci/ansible/inventory.txt
                 echo "$VIJI_IP" > .circleci/ansible/inventory.txt
                 
                 cat .circleci/outputs/link.txt
         # no_output_timeout: 5m      
             
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            
      #- destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
                fingerprints: ["7c:ef:94:b3:c8:e8:e8:cc:30:24:65:9c:bb:dd:c4:91"]
      - attach_workspace:
                at: ~/
      - run:
              name: Install dependencies
              command: |
                       apk add --no-cache \
                       python3 \
                       py3-pip \
                       && pip3 install --upgrade pip \
                       && pip3 install \
                       awscli \
                       && rm -rf /var/cache/apk/*
                       apk add --update ansible
      - run:
              name: Configure server
              command: |
                    cd .circleci/ansible
                    ansible-playbook -i inventory.txt configure-server.yml
                
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-build]           
      - run:
          name: Run migrations
          command : | 
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
             then
              curl -H "Content-Type: text/plain" -H "token: 3db6c101-a4a9-41b4-9a5c-259717683a43" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}              
             fi      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]   
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                only:
                  - master 
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]                
          
       
      
